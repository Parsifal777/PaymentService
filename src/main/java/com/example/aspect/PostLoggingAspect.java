package com.example.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@Aspect
@Component
@Order(2)
public class PostLoggingAspect {

    private static final Logger logger = LoggerFactory.getLogger(PostLoggingAspect.class);

    @AfterReturning(pointcut = "@annotation(toLog)", returning = "result")
    public void logAfterSuccessfulExecution(JoinPoint joinPoint, ToLog toLog, Object result) {
        String methodName = joinPoint.getSignature().getName();
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String customMessage = toLog.value().isEmpty() ? "" : " - " + toLog.value();

        switch (toLog.level()) {
            case INFO:
                logger.info("üü¢ [POST-ASPECT 2] –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {}.{}{}",
                        className, methodName, customMessage);
                break;
            case WARN:
                logger.warn("üü¢ [POST-ASPECT 2] –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {}.{}{}",
                        className, methodName, customMessage);
                break;
            case ERROR:
                logger.error("üü¢ [POST-ASPECT 2] –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {}.{}{}",
                        className, methodName, customMessage);
                break;
        }

        if (result != null) {
            logger.debug("üü¢ [POST-ASPECT 2] –†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–æ–¥–∞ {}: {}", methodName, result);
        }
    }

    @After("@annotation(toLog)")
    public void logAfterMethodExecution(JoinPoint joinPoint, ToLog toLog) {
        String methodName = joinPoint.getSignature().getName();
        String className = joinPoint.getTarget().getClass().getSimpleName();

        logger.info("üîµ [POST-ASPECT 2] –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {}.{}", className, methodName);
    }

    @AfterThrowing(pointcut = "@annotation(toLog)", throwing = "exception")
    public void logAfterException(JoinPoint joinPoint, ToLog toLog, Exception exception) {
        String methodName = joinPoint.getSignature().getName();
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String customMessage = toLog.value().isEmpty() ? "" : " - " + toLog.value();

        logger.error("üî¥ [POST-ASPECT 2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {}.{}{} - {}",
                className, methodName, customMessage, exception.getMessage());
    }
}